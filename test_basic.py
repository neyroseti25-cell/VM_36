#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
from pathlib import Path


def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'bot_funnel.py',
        'config.py', 
        'utils.py',
        'users.csv',
        'requirements.txt',
        'env.example',
        'templates/interest.html',
        'templates/solution.html',
        'templates/deadline.html',
        'templates/styles.css'
    ]
    
    all_good = True
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    return all_good


def test_csv_content():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º CSV —Ñ–∞–π–ª...")
    
    try:
        with open('users.csv', 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        if len(lines) < 2:
            print("‚ùå CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = lines[0].strip().split(',')
        required_headers = ['name', 'role', 'company', 'telegram_id', 'variant']
        
        for header in required_headers:
            if header not in headers:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {header}")
                return False
        
        print(f"‚úÖ CSV —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {len(lines)-1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"   –ü–æ–ª—è: {', '.join(headers)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        variants = []
        for line in lines[1:]:
            parts = line.strip().split(',')
            if len(parts) >= 5:
                variants.append(parts[4])
        
        variant_counts = {}
        for variant in variants:
            variant_counts[variant] = variant_counts.get(variant, 0) + 1
        
        print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {variant_counts}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
        print("   –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
        for i, line in enumerate(lines[1:4], 1):
            print(f"   {i}. {line.strip()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return False


def test_html_templates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTML —à–∞–±–ª–æ–Ω—ã —Å A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —à–∞–±–ª–æ–Ω—ã...")
    
    stages = ['interest', 'solution', 'deadline']
    variants = ['a', 'b', 'c']
    all_good = True
    
    for stage in stages:
        for variant in variants:
            template_name = f"{stage}_{variant}.html"
            template_path = f"templates/{template_name}"
            try:
                with open(template_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
                placeholders = ['{{ name }}', '{{ role }}', '{{ company }}', '{{ brand.logo }}']
                missing_placeholders = [p for p in placeholders if p not in content]
                
                if missing_placeholders:
                    print(f"‚ùå {template_name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã {missing_placeholders}")
                    all_good = False
                else:
                    print(f"‚úÖ {template_name}: –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"‚ùå {template_name}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
                all_good = False
    
    return all_good


def test_css_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç CSS —Ñ–∞–π–ª"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS —Ñ–∞–π–ª...")
    
    try:
        with open('templates/styles.css', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        required_styles = ['body', '.container', 'h1', 'p']
        missing_styles = [style for style in required_styles if style not in content]
        
        if missing_styles:
            print(f"‚ùå CSS: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∏–ª–∏ {missing_styles}")
            return False
        else:
            print("‚úÖ CSS —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return True
            
    except Exception as e:
        print(f"‚ùå CSS: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
        return False


def test_python_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤...")
    
    python_files = ['bot_funnel.py', 'config.py', 'utils.py']
    all_good = True
    
    for file_path in python_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            compile(content, file_path, 'exec')
            print(f"‚úÖ {file_path}: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
        except SyntaxError as e:
            print(f"‚ùå {file_path}: —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
            all_good = False
        except Exception as e:
            print(f"‚ùå {file_path}: –æ—à–∏–±–∫–∞ - {e}")
            all_good = False
    
    return all_good


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Ä–æ–Ω–∫–∏\n")
    
    tests = [
        test_file_structure,
        test_csv_content,
        test_html_templates,
        test_css_file,
        test_python_syntax
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("="*50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å BOT_TOKEN")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 bot_funnel.py --test")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
    
    return passed == total


if __name__ == "__main__":
    main()
