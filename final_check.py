#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Ä–æ–Ω–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤ —Å A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import os
import sys
from pathlib import Path

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        'bot_funnel.py',
        'config.py', 
        'utils.py',
        'users.csv',
        'requirements.txt',
        'env.example',
        'templates/styles.css',
        'test_basic.py',
        'demo_ab_testing.py',
        'README.md',
        'QUICKSTART.md',
        'PROJECT_COMPLETE.md'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —à–∞–±–ª–æ–Ω—ã
    stages = ['interest', 'solution', 'deadline']
    variants = ['a', 'b', 'c']
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —à–∞–±–ª–æ–Ω–æ–≤:")
    for stage in stages:
        for variant in variants:
            template_path = f"templates/{stage}_{variant}.html"
            if Path(template_path).exists():
                print(f"‚úÖ {template_path}")
            else:
                missing_files.append(template_path)
                print(f"‚ùå {template_path}")
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print(f"\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ! –í—Å–µ–≥–æ: {len(required_files) + 9} —Ñ–∞–π–ª–æ–≤")
    return True


def check_csv_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV —Ñ–∞–π–ª–∞"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ CSV —Ñ–∞–π–ª–∞...")
    
    try:
        with open('users.csv', 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        if len(lines) < 2:
            print("‚ùå CSV —Ñ–∞–π–ª –ø—É—Å—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = lines[0].strip().split(',')
        required_headers = ['name', 'role', 'company', 'telegram_id', 'variant']
        
        missing_headers = [h for h in required_headers if h not in headers]
        if missing_headers:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_headers}")
            return False
        
        print(f"‚úÖ CSV —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {len(lines)-1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"   –ü–æ–ª—è: {', '.join(headers)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        variants = []
        for line in lines[1:]:
            parts = line.strip().split(',')
            if len(parts) >= 5:
                variants.append(parts[4])
        
        variant_counts = {}
        for variant in variants:
            variant_counts[variant] = variant_counts.get(variant, 0) + 1
        
        print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {variant_counts}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return False


def check_branding():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—Ä–µ–Ω–¥–∏–Ω–≥"""
    print("\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ Poznay Sebya...")
    
    try:
        from config import BRAND, FONTS
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   –õ–æ–≥–æ—Ç–∏–ø: {BRAND['logo']}")
        print(f"   –¶–≤–µ—Ç–∞: {len(BRAND['colors'])} —Ü–≤–µ—Ç–æ–≤")
        print(f"   –®—Ä–∏—Ñ—Ç—ã: {len(FONTS)} —à—Ä–∏—Ñ—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS —Ñ–∞–π–ª
        with open('templates/styles.css', 'r', encoding='utf-8') as f:
            css_content = f.read()
        
        if 'Cormorant Garamond' in css_content and 'Inter' in css_content:
            print("‚úÖ CSS —Å–æ–¥–µ—Ä–∂–∏—Ç –±—Ä–µ–Ω–¥–æ–≤—ã–µ —à—Ä–∏—Ñ—Ç—ã")
        else:
            print("‚ùå CSS –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—Ä–µ–Ω–¥–æ–≤—ã–µ —à—Ä–∏—Ñ—Ç—ã")
            return False
        
        if '#F5F3EF' in css_content and '#A38DA2' in css_content:
            print("‚úÖ CSS —Å–æ–¥–µ—Ä–∂–∏—Ç –±—Ä–µ–Ω–¥–æ–≤—ã–µ —Ü–≤–µ—Ç–∞")
        else:
            print("‚ùå CSS –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—Ä–µ–Ω–¥–æ–≤—ã–µ —Ü–≤–µ—Ç–∞")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞: {e}")
        return False


def check_templates_content():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤...")
    
    stages = ['interest', 'solution', 'deadline']
    variants = ['a', 'b', 'c']
    all_good = True
    
    for stage in stages:
        for variant in variants:
            template_path = f"templates/{stage}_{variant}.html"
            try:
                with open(template_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
                placeholders = ['{{ name }}', '{{ role }}', '{{ company }}', '{{ brand.logo }}']
                missing_placeholders = [p for p in placeholders if p not in content]
                
                if missing_placeholders:
                    print(f"‚ùå {template_path}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {missing_placeholders}")
                    all_good = False
                else:
                    print(f"‚úÖ {template_path}: –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"‚ùå {template_path}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
                all_good = False
    
    return all_good


def check_python_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤"""
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤...")
    
    python_files = ['bot_funnel.py', 'config.py', 'utils.py']
    all_good = True
    
    for file_path in python_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            compile(content, file_path, 'exec')
            print(f"‚úÖ {file_path}: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
        except SyntaxError as e:
            print(f"‚ùå {file_path}: —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
            all_good = False
        except Exception as e:
            print(f"‚ùå {file_path}: –æ—à–∏–±–∫–∞ - {e}")
            all_good = False
    
    return all_good


def show_usage_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("\nüöÄ –°–≤–æ–¥–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    
    print("\n1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞:")
    print("   pip install -r requirements.txt")
    print("   cp env.example .env")
    print("   # –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ .env")
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("   python3 test_basic.py")
    print("   python3 demo_ab_testing.py")
    print("   python3 bot_funnel.py --test")
    print("   python3 bot_funnel.py --test --variant random")
    
    print("\n3. –û—Ç–ø—Ä–∞–≤–∫–∞:")
    print("   python3 bot_funnel.py --send")
    print("   python3 bot_funnel.py --send --variant random")
    
    print("\n4. –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("   - 15 PNG —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
    print("   - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
    print("   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Ä–æ–Ω–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤ —Å A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n")
    
    checks = [
        check_project_structure(),
        check_csv_structure(),
        check_branding(),
        check_templates_content(),
        check_python_syntax()
    ]
    
    passed = sum(checks)
    total = len(checks)
    
    print("\n" + "="*60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤!")
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:")
        print("   - A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏")
        print("   - –ë—Ä–µ–Ω–¥–∏–Ω–≥ Poznay Sebya")
        print("   - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("   - –û—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞")
        
        show_usage_summary()
        
        print("\nüéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
        
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
    
    return passed == total


if __name__ == "__main__":
    main()

