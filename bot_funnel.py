#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤
"""

import asyncio
import argparse
import os
import sys
from pathlib import Path

from aiogram import Bot
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from utils import load_users, render_html, html_to_png, get_keyboard, get_random_variant
from config import BOT_TOKEN, STAGES, SEND_DELAY, VARIANTS


async def send_funnel(bot: Bot, users_df, output_dir: str, send_real: bool = False, variant_mode: str = 'fixed'):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–æ—Ä–æ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(users_df)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    print(f"–†–µ–∂–∏–º: {'–û—Ç–ø—Ä–∞–≤–∫–∞' if send_real else '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è PNG)'}")
    print(f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {variant_mode}")
    
    total_messages = len(users_df) * len(STAGES)
    processed = 0
    variant_stats = {'a': 0, 'b': 0, 'c': 0}
    
    for _, row in users_df.iterrows():
        user_data = {
            'name': row['name'],
            'role': row['role'],
            'company': row['company']
        }
        chat_id = row['telegram_id']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if variant_mode == 'random':
            variant = get_random_variant()
        else:
            variant = row.get('variant', 'a')
        
        print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data['name']} (ID: {chat_id}, –≤–∞—Ä–∏–∞–Ω—Ç: {variant.upper()})")
        
        for stage in STAGES:
            try:
                # –†–µ–Ω–¥–µ—Ä–∏–º HTML —Å —É—á–µ—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞
                html_content = render_html(stage, variant, user_data)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                png_path = html_to_png(html_content, f"{stage}_{variant}", chat_id, output_dir, user_data)
                
                if send_real:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                    keyboard = get_keyboard(stage, chat_id, user_data['name'])
                    caption = f"–≠—Ç–∞–ø {stage.capitalize()} (–≤–∞—Ä–∏–∞–Ω—Ç {variant.upper()}) –¥–ª—è {user_data['name']}"
                    
                    try:
                        await bot.send_photo(
                            chat_id=chat_id,
                            photo=FSInputFile(png_path),
                            caption=caption,
                            reply_markup=keyboard
                        )
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stage}_{variant} –¥–ª—è {user_data['name']}")
                        
                    except TelegramBadRequest as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {stage}_{variant} –¥–ª—è {user_data['name']}: {e}")
                    except TelegramForbiddenError as e:
                        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['name']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}")
                    except Exception as e:
                        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {stage}_{variant} –¥–ª—è {user_data['name']}: {e}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(SEND_DELAY)
                else:
                    print(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {png_path}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                variant_stats[variant] += 1
                processed += 1
                print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{total_messages}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {stage}_{variant} –¥–ª—è {user_data['name']}: {e}")
                continue
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {variant_stats}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Telegram Bot –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤ —Å A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º')
    parser.add_argument('--test', action='store_true', help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PNG)')
    parser.add_argument('--send', action='store_true', help='–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π')
    parser.add_argument('--variant', choices=['fixed', 'random'], default='fixed', 
                       help='–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: fixed (–ø–æ CSV) –∏–ª–∏ random (—Å–ª—É—á–∞–π–Ω–æ)')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if args.send:
        send_real = True
        mode = "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    else:
        send_real = False
        mode = "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ {mode}")
    print(f"üéØ –í–∞—Ä–∏–∞–Ω—Ç—ã: {args.variant}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ BOT_TOKEN=your_bot_token")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
    output_dir = "output"
    os.makedirs(output_dir, exist_ok=True)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_df = load_users('users.csv')
        
        if users_df.empty:
            print("‚ùå –û—à–∏–±–∫–∞: CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(token=BOT_TOKEN)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        await send_funnel(bot, users_df, output_dir, send_real, args.variant)
        
    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        if 'bot' in locals():
            await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
