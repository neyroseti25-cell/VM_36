#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')

def demo_variants():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
    stages = ['interest', 'solution', 'deadline']
    variants = ['a', 'b', 'c']
    
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤:")
    all_templates_exist = True
    
    for stage in stages:
        for variant in variants:
            template_path = f"templates/{stage}_{variant}.html"
            if Path(template_path).exists():
                print(f"‚úÖ {template_path}")
            else:
                print(f"‚ùå {template_path} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                all_templates_exist = False
    
    if not all_templates_exist:
        print("\n‚ùå –ù–µ –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã.")
        return False
    
    print(f"\nüé® –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(stages) * len(variants)}")
    print("   –≠—Ç–∞–ø—ã:", ', '.join(stages))
    print("   –í–∞—Ä–∏–∞–Ω—Ç—ã:", ', '.join(variants))
    
    return True


def demo_csv_variants():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ CSV —Ñ–∞–π–ª–µ"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ CSV —Ñ–∞–π–ª–µ:")
    
    try:
        with open('users.csv', 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        if len(lines) < 2:
            print("‚ùå CSV —Ñ–∞–π–ª –ø—É—Å—Ç")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        variants = []
        for line in lines[1:]:
            parts = line.strip().split(',')
            if len(parts) >= 5:
                variants.append(parts[4])
        
        variant_counts = {}
        for variant in variants:
            variant_counts[variant] = variant_counts.get(variant, 0) + 1
        
        print("   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        for variant, count in variant_counts.items():
            percentage = (count / len(variants)) * 100
            print(f"   - –í–∞—Ä–∏–∞–Ω—Ç {variant.upper()}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({percentage:.1f}%)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ CSV: {e}")
        return False


def demo_branding():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±—Ä–µ–Ω–¥–∏–Ω–≥ Poznay Sebya"""
    print("\nüé® –ë—Ä–µ–Ω–¥–∏–Ω–≥ Poznay Sebya:")
    
    try:
        from config import BRAND, FONTS
        
        print("   –õ–æ–≥–æ—Ç–∏–ø:", BRAND['logo'])
        print("   –¶–≤–µ—Ç–∞:")
        for color_name, color_value in BRAND['colors'].items():
            print(f"   - {color_name}: {color_value}")
        
        print("   –®—Ä–∏—Ñ—Ç—ã:")
        for font_type, font_value in FONTS.items():
            print(f"   - {font_type}: {font_value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞: {e}")
        return False


def demo_usage_examples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏:")
    print("   python3 bot_funnel.py --test")
    print("   # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ CSV —Ñ–∞–π–ª–∞")
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏:")
    print("   python3 bot_funnel.py --test --variant random")
    print("   # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç a, b –∏–ª–∏ c –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    print("\n3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏:")
    print("   python3 bot_funnel.py --send")
    print("   # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–∑ CSV")
    
    print("\n4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏:")
    print("   python3 bot_funnel.py --send --variant random")
    print("   # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏")
    
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    print("   python3 test_basic.py")
    print("   # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã")


def demo_expected_output():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print("\nüìà –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    
    print("   –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ --test –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:")
    print("   - 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π √ó 3 —ç—Ç–∞–ø–∞ √ó 1 –≤–∞—Ä–∏–∞–Ω—Ç = 15 PNG —Ñ–∞–π–ª–æ–≤")
    print("   - –§–∞–π–ª—ã: interest_a_123456789.png, solution_b_987654321.png, etc.")
    
    print("\n   –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ --variant random:")
    print("   - –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞")
    print("   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∂–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {'a': 5, 'b': 6, 'c': 4}")
    
    print("\n   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ PNG —Ñ–∞–π–ª–æ–≤:")
    print("   - –†–∞–∑–º–µ—Ä: 800x600 –ø–∏–∫—Å–µ–ª–µ–π")
    print("   - –ë—Ä–µ–Ω–¥–∏–Ω–≥: Poznay Sebya —Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏")
    print("   - –®—Ä–∏—Ñ—Ç—ã: Cormorant Garamond + Inter")
    print("   - –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤ Poznay Sebya\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    checks = [
        demo_variants(),
        demo_csv_variants(),
        demo_branding()
    ]
    
    if all(checks):
        print("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        demo_usage_examples()
        demo_expected_output()
        
        print("\n" + "="*60)
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 bot_funnel.py --test --variant random")
        
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")


if __name__ == "__main__":
    main()

